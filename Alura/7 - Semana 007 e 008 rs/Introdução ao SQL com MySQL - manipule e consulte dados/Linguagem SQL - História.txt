LINGUAGEM SQL - História

VANTAGENS:
- Aprendizado
- Portabilidade
- Longevidade
- Comunicação
- Liberdade de Escolha

DESVANTAGENS:
- Falta de criatividade
- Falta de estruturação

COMANDOS:

- DDL
- DML
- DCL

Vamos iniciar contando a história da linguagem SQL, para compreendermos quais foram os motivos, como surgiu e o seu histórico.

A linguagem SQL foi desenvolvida no começo dos anos 70, na cidade de São José, Califórnia, em um projeto chamado System R da IBM, do inglês International Business Machines, cujo o objetivo era comprovar a possibilidade da implementação de um modelo relacional, que um estudioso chamado Codd estava propondo.

Esse estudioso elaborou uma forma estruturada de realizar consultas nos bancos de dados que estavam surgindo, os relacionais.

Naquela época, os bancos de dados ainda não possuíam relacionamento entre as tabelas em que os dados eram armazenados. Era a categoria de banco de dados mais antigo, a sequencial, que efetua a consulta dos registros de maneira sequencial, ou seja, um após o outro.

O nome desses bancos de dados relacionais que estavam aparecendo era DBMS, do inglês Data Base Management System, que traduzindo fica Sistema de Gerenciamento de Banco de Dados (SGBD).

Codd considerou criar uma linguagem de fácil extração e manipulação de dados, e não somente os dados, mas as estruturas do banco utilizando a característica de relacionamento entre eles.

Porém, não era apenas a IBM que estava trabalhando com os novos bancos de dados relacionais. A Oracle no meio dos anos 80, também estava buscando maneiras mais fáceis de manipular essas novas estruturas, entre outras empresas.

Mais para o final dos anos 80 e início dos 90, um órgão americano, o ANSI da sigla American National Standard Institute, estabeleceu alguns padrões para as consultas dos bancos de dados relacionais.

Então, foi criada uma linguagem SEQUEL, do inglês Structured English Query Language que traduzindo seria linguagem de consulta estruturada em inglês.

No inglês, geralmente, é pronunciado SEQUEL e não SQL, ao contrário do português, que usamos mais SQL.

O principal objetivo da linguagem SQL é padronizar a maneira como os registros são consultados nos bancos de dados relacionais. Atualmente, os bancos relacionais aderem ao padrão SEQUEL, que vai além das consultas. É usado também, na criação, alteração, estruturação, manipulação, na maneira como o banco de dados interage com a segurança, entre outros.

Entre as vantagens do banco de dados relacional, a primeira é que essa padronização utilizando a linguagem SEQUEL tem um custo reduzido do aprendizado. Por exemplo, o profissional com conhecimento sobre o SQL da Oracle, facilmente conseguirá manipular o SQL Server da Microsoft, por mais que tenha divergências principalmente na parte de funções, não é uma questão muito complicada de adaptação.

Outra vantagem, é a portabilidade. Por exemplo, é mais simples migrar sistemas que usam Oracle para SQL Server ou para MySQL, ou vice-versa. Lembrando que quanto mais for utilizado o SQL Standard definido pelo ANSI, facilitará a portabilidade. Então, é útil evitar as funções específicas do banco de dados e permitir que o programa realize essa tarefa.

Já a longevidade é a garantia de que os seus relatórios ou processos utilizando o SQL irão funcionar por um longo período, já que estarão sempre adaptados ao padrão ANSI. Ou seja, ao efetuar um upgrade de banco de dados o seu sistema não ficará fora de serviço.

Outro benefício é a comunicação, o fato da maioria utilizar SQL permite a facilidade de comunicação entre os sistemas. Como, por exemplo, processos de ETL, do inglês extract, transform and load, ou de integração entre sistemas que ficam mais simples de serem desenvolvidos, já que ambos utilizam o SQL padrão.

Agora, na liberdade de escolha, por ter uma linguagem padrão, se a empresa for optar pelo uso de um banco de dados relacional não ficará presa à linguagem de comunicação, por exemplo, já que são bem semelhantes. Ao tomar essa decisão, a corporação irá utilizar outros critérios de escolha, como performance, hardware, custo, entre outros.

Contudo, essa padronização não possui apenas vantagens, há algumas desvantagens. A primeira é privação de criatividade, há limitações que podem não atender as novas demandas no mercado na linguagem SQL, por exemplo. Principalmente com o surgimento das redes sociais e dos enormes volumes de dados, o chamado big data. Ou seja, há uma carência nas coletas de dados que estão trafegando na internet.

Para tal, criaram outros bancos que usam padrões diferentes dos bancos de dados relacionais, o chamado NOSEQUEL. Estes atendem de forma mais eficiente a demanda, como no caso de big data das redes sociais. Recordando que estamos nos referindo a estruturas que escapam do padrão ANSI e que, por isso, exigem um aprendizado mais específico.

Outro ponto é a escassez de estruturação da linguagem SQL, já que não possui if's, for's e when's, isto é, comandos condicionais como as demais linguagens de programação.

Para conseguir suprir essa carência da estruturação, os bancos de dados relacionais da Oracle, SQL e MySQL criaram suas linguagens próprias internas que realizam esse conjunto de estruturação usando a linguagem SQL, mas que acaba se afastando um pouco do padrão ANSI.

Falando um pouco sobre o padrão ANSI, este possui três grupos de comandos. O primeiro, é o DDLs, o Data Definition Language, que traduzindo fica linguagem de definição de dados. É a fração que permite a manipulação das estruturas do banco de dados. Como, por exemplo, criar um banco, tabelas, índices, apagar as tabelas e alterar a política de crescimento de índice. Ou seja, os comandos que envolvem a estrutura do banco de dados relacionais são os comandos do tipo DDL.

O segundo grupo de comandos são os chamados DML, o Data Manipulation Language que traduzindo fica linguagem de manipulação de dados. Esse grupo visa gerenciar os dados: incluindo, alterando e excluindo informações nas estruturas do banco, como as tabelas. Também, realiza as consultas, buscar as informações das estruturas e exibi-las para o usuário.

E finalmente, chegamos nos comandos DCL, a Data Control Language, que traduzindo fica linguagem de controle de dados. Este grupo nos permite administrar o banco de dados como, por exemplo, o controle de acesso, o gerencimanto do usuário, gerenciar o que cada usuário(a) pode ou não visualizar, gerenciar o banco ao nível de estrutura como a política de crescimento, como e onde será armazenado no disco, administrar os processos, saber quantos processos estão sendo executados e controle de log, entre outros.